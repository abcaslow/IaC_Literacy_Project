<!DOCTYPE HTML><html><body><strong>Analyzing an AppleWatch Heartrate Dataset</strong><br><br><strong>Getting Started</strong><br>Open a Jupyter Lab Terminal.<br><br><strong>To Access the Correct BBB Shared Notes File from &#x2F;scripts</strong><br>bbb-shared-notes --set&nbsp; &lt; ds4hs-berkeley-pandas-heartrate-june<br><strong>DO NOT REVERSE THE &lt; to a &gt;&nbsp;&nbsp; THIS IS A&nbsp; D-I-S-A-S-T-E-R!&nbsp;</strong><br>jbs<br>Make sure you are in IaC_Literacy_Project&#x2F;Module1-DS4HS<br>Enter: ipython3<br>Remember to use&nbsp; the &lt;tab&gt; key and the ? for help.<br><br><strong>Import the necessary Python Modules:</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;<br>from datascience import *<br>import numpy as np<br>import pandas as pd&nbsp;<br><br><strong>How to import&nbsp; a csv data file into bds and pds</strong><br>bdf=Table.read_table(&#x27;.&#x2F;heartrate-Jun.csv&#x27;)<br>df=pd.read_csv(&#x27;.data&#x2F;heartrate-June.csv&#x27;)<br><strong>How inspect the data that is imported</strong><br><strong>BDS</strong><br>bdf&nbsp; #Only the first 10 rows will be displayed<br>bdf.num_rows<br>bdf.num_columns<br>bdf.shape<br>bdf.dtype<br>bdf.labels<br>bdf.columns *very different than df.columns<br>bdf.take[:10]&nbsp; equal to df.head(10) but use numpy [:] notation<br>bdf.take[-10:]&nbsp; equal to df.tail(10) but use numpy [:] notation<br><br><strong>PDS</strong><br>df # All df rows will be displayed; use df.head(10) to see 1st 10 rows<br>df.info()<br>df.columns<br>df.dtypes<br>df.head(x)&nbsp;&nbsp; where x is the top rows of the dataframe<br>df.tail(x)&nbsp;&nbsp; where x is the bottom rows of the dataframe<br><br><strong>How to Analyze Specific General Characteristics of the Data</strong><br><strong>BDS</strong><br>for i in range(30,110,10): print(i,len(bdf[1][bdf[1]&lt;i]))<br>for i in range(100,210,10): print(i,len(bdf[1][bdf[1]&gt;i]))<br><strong>PDS</strong><br>df.describe()<br><br><strong>How to select a subset of rows from a Table&#x2F;Dataframe</strong><br><strong>BDS #For help, use &quot;?Table.take&quot; or &quot;?Table.where&quot;</strong><br>bdf.take[x:y]&nbsp; #This is a very flexible cmd for selecting rows.<br><br>bdf.where(&#x27;hr&#x27;, are.between_or_equal_to(82, 200))<br>t.where(&#x27;Sizes&#x27;, are.containing(&#x27;L&#x27;))<br>Sizes | Waists<br>L&nbsp;&nbsp;&nbsp;&nbsp; | 38<br>XL&nbsp;&nbsp;&nbsp; | 42<br>t.where(&#x27;Sizes&#x27;, are.not_containing(&#x27;L&#x27;))<br>Sizes | Waists<br>S&nbsp;&nbsp;&nbsp;&nbsp; | 30<br>M&nbsp;&nbsp;&nbsp;&nbsp; | 34<br>t.where(&#x27;Sizes&#x27;, are.contained_in(&#x27;MXL&#x27;))&nbsp; #LOGICAL OR!!!!!<br>Sizes | Waists<br>M&nbsp;&nbsp;&nbsp;&nbsp; | 34<br>L&nbsp;&nbsp;&nbsp;&nbsp; | 38<br>XL&nbsp;&nbsp;&nbsp; | 42<br>t.where(&#x27;Sizes&#x27;, are.contained_in(&#x27;L&#x27;))<br>Sizes | Waists<br>L&nbsp;&nbsp;&nbsp;&nbsp; | 38<br>t.where(&#x27;Sizes&#x27;, are.not_contained_in(&#x27;MXL&#x27;)) #LOGICAL OR!!!!!<br>Sizes | Waists<br><br><strong>PDS - the iloc &amp; loc methods&#x2F;For help: &quot;?df.iloc&quot; or &quot;?df.loc&quot;</strong><br>df.iloc[:10]<br>df.iloc[:10, 3:6] #like bds take but can specify columns as well<br>&nbsp;#MUST DO THIS FOR loc<br>df.loc[[&#x27;Apple&#x27;,&#x27;Facebook&#x27;]] #Note the use of double brackets!<br>df.loc[(df[&#x27;market-cap&#x27;] &gt; 70) &amp; (df[&#x27;sector&#x27;] == &#x27;retail&#x27;)]<br><br><strong>BDS to PDS</strong><br>bdf.to_df()<br>bdf.from_df(df-name)<br><br><br><br><br><br><br><br><br><br></body></html>
