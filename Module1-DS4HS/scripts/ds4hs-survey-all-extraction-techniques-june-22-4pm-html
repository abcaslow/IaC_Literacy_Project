<!DOCTYPE HTML><html><body><strong>How to Locate and Slice Out Specific Data using:</strong><br>&nbsp;&nbsp;&nbsp; 1. Native Python Techniques<br>&nbsp;&nbsp;&nbsp; 2. Numpy<br>&nbsp;&nbsp;&nbsp; 3. Berkeley datascience<br>&nbsp;&nbsp;&nbsp; 4. pandas<br><br><strong>Built-in Python String Methods</strong><br><br>&#x27;catcx&#x27;.find(&#x27;at&#x27;)&nbsp; True=starting idx#; False=-1 # -1 l<br>&#x27;catcx&#x27;.startswith(&#x27;c&quot;) True&#x2F;False #pandas loc uses this method<br><br>&#x27;catcx.endswith(&#x27;x&#x27;) True&#x2F;False #pandas loc uses this method<br>Example: data.loc[data[&#x27;email&#x27;].str.endswith(&quot;hotmail.com&quot;)]&nbsp;<br><br>Source: <a href="https&#x3a;&#x2F;&#x2F;www&#x2e;shanelynn&#x2e;ie&#x2F;pandas&#x2d;iloc&#x2d;loc&#x2d;select&#x2d;rows&#x2d;and&#x2d;columns&#x2d;dataframe&#x2F;" rel="noreferrer noopener">https:&#x2F;&#x2F;www.shanelynn.ie&#x2F;pandas-iloc-loc-select-rows-and-columns-dataframe&#x2F;</a><br><br><strong>Built-in Python List Methods</strong><br><br>xyz.count(&#x27;chimp&#x27;)&nbsp;<br><br>Booltest=[&#x27;Baltimore&#x27;, &#x27;London&#x27;, &#x27;Paris&#x27;, &#x27;Boston&#x27;]<br><strong>use: and, or, and not, or not</strong><br><br>for i in Booltest:<br>&nbsp;&nbsp;&nbsp; if i.startswith(&#x27;B&#x27;) and not i.endswith(&#x27;on&#x27;):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print (i)<br><br><strong>Numpy Array Slicing</strong><br><br>hr[hr&gt;100]<br><br><strong>The Numpy Cryptic Find and Where Combination</strong><br><br>npresult= np.char.find(fraxnpstr, &#x27;2019-06-08 1&#x27;) #note &#x27;find&#x27;<br>result = np.where(npresult == 0)&nbsp; #note the use of &#x27;where&#x27;<br>fraxnpstr[result] #W-O-W!!!! Feed in an array to an array!!!&nbsp;<br><br>While these steps may seem cryptic, you will see an application for them in the following Berkeley&#x2F;Numpy combinations<br><br><strong>Berkeley&#x2F;Numpy Combinations</strong><br><br>for i in range(30,110,10): print(i,len(bdf[1][bdf[1]&lt;i]))<br>for i in range(100,210,10): print(i,len(bdf[1][bdf[1]&gt;i]))<br><br><strong>Running Numpy from a Berkeley datascience Table</strong><br>This analysis method is useful before using the Berekeley where&#x2F;are techniques. If you get output with Berk&#x2F;numpy, goto berk&#x2F;where<br><br>hrabc[1][hrabc[1]&gt;100]<br><br><strong>A more advanced Boolean &quot;AND&quot; example with np.where:</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;<br>x11=(hrabc[1]&gt;100) &amp; (hrabc[1]&lt;150)<br>x11result= np.where(x11==True)&nbsp; #note the use of &quot;where&quot;<br>hrabc[1][x11result]<br><br><strong>Berkeley Where&#x2F;are Techniques</strong><br>BDS #For help, use &quot;?Table.take&quot; or &quot;?Table.where&quot;<br><br>bdf.where(&#x27;hr&#x27;, are.between_or_equal_to(82, 200))<br>t.where(&#x27;Sizes&#x27;, are.containing(&#x27;L&#x27;))<br>t.where(&#x27;Sizes&#x27;, are.not_containing(&#x27;L&#x27;))<br>t.where(&#x27;Sizes&#x27;, are.contained_in(&#x27;MXL&#x27;))&nbsp; #LOGICAL OR!!!!!<br>Sizes | Waists<br>t.where(&#x27;Sizes&#x27;, are.contained_in(&#x27;L&#x27;))<br>t.where(&#x27;Sizes&#x27;, are.not_contained_in(&#x27;MXL&#x27;)) #LOGICAL OR!!!!!<br><br><br><strong>pandas iloc&#x2F;loc Techniques</strong><br>Notice that pandas uses the same Boolean &amp; as numpy<br><br>PDS - the iloc &amp; loc methods&#x2F;For help: &quot;?df.iloc&quot; or &quot;?df.loc&quot;<br>df.iloc[:10]<br>df.iloc[:10, 3:6] #like bds take but can specify columns as well<br>&nbsp;#MUST DO THIS FOR loc<br>df.loc[[&#x27;Apple&#x27;,&#x27;Facebook&#x27;]] #Note the use of double brackets!<br>df.loc[(df[&#x27;market-cap&#x27;] &gt; 70) &amp; (df[&#x27;sector&#x27;] == &#x27;retail&#x27;)]<br><br>Remember: convert a pandas column to a numpy array with:<br>&nbsp;&nbsp;&nbsp; demomrktcap=demodf[&#x27;market-cap&#x27;].to_numpy()<br><br><strong>Another Useful pandas Technique</strong><br>Notice pandas uses &#x27;contains&#x27; like the Berkeley &#x27;where&#x27; method<br><br>temp1=dflania[dflania[&#x27;timestamp&#x27;].str.contains(&#x27;2019-06-09 1&#x27;)]<br><br><a href="https&#x3a;&#x2F;&#x2F;stackoverflow&#x2e;com&#x2F;questions&#x2F;11350770&#x2F;select&#x2d;by&#x2d;partial&#x2d;string&#x2d;from&#x2d;a&#x2d;pandas&#x2d;dataframe" rel="noreferrer noopener">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;11350770&#x2F;select-by-partial-string-from-a-pandas-dataframe</a><br><br><strong>A Crypytic but Educationally Useful pandas Technique</strong><br><br>dftslania=dflania[&#x27;timestamp&#x27;].str[:19]<br>#dflania[&#x27;timestamp&#x27;].str[:19] #yr-mo-date hr-min-sec<br><br>srslaniahr=dflania[&#x27;heartrate&#x27;]<br>dffrax=pd.concat([dftslania,srslaniahr], axis=1)<br>dftsfrax1 = dffrax.set_index(&#x27;timestamp&#x27;)<br>dftsfrax1[&#x27;2019-06-08 14:21:11&#x27; :&#x27;2019-06-08 14:56:23&#x27;]<br>dftsfrax1.iloc[1000:1010]<br><br><strong>Renaming Columns in pandas</strong><br>for a pandas column in a dataframe:<br>dflaniaidx1 = dflaniaidx.rename(columns={&#x27;timestamp&#x27;: &#x27;dateidx&#x27;})<br>for the one and only one column in a pandas series<br>dflaniaidx1 = dflaniaidx.rename(&#x27;dateidx&#x27;)<br><br><strong>A Useful pandas Statistical Summary method</strong><br>df.describe()<br><br><strong>BDS to PDS</strong><br>bdf.to_df()<br>bdf.from_df(df-name)<br><br><strong>When Mongo Crashes and stops shared-notes operations</strong><br>bbb-conf --status<br>systemctl status mongod<br>bbb-conf --stop<br>bbb-conf--start<br>bbb-get-meetings<br><br><br><br></body></html>
